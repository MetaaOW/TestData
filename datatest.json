[
    {
        "id": 1,
        "category": "Swiftfd",
        "content": {
            "id": 0,
            "image": "rune1-fehu",
            "time": "3 hours",
            "description": "Understand the fundamentals of the Swift programming language.",
            "lessons": [
                {
                    "id": 0,
                    "title": "Constants and Variables",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<div class='section' id='the-basics'><p>Constants and variables must be declared before they're used. You declare "
                },
                {
                    "id": 1,
                    "title": "Numbers",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Integers are whole numbers with no fractional component, such as 42 and -23. Integers are either signed (positive, zero, or negative) or unsigned (positive or zero). Swift provides signed and unsigned integers in 8, 16, 32, and "
                },
                {
                    "id": 2,
                    "title": "Booleans",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Swift has a basic Boolean type, called Bool. Boolean values are referred to as logical, because they can only ever be true or false. Swift provides two Boolean constant values, true and false:</p><div class='highlight-swift "
                },
                {
                    "id": 3,
                    "title": "Optionals",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%2013%20-%20Optionals-uT2IHQpE3ms.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>You use optionals in situations where a value may be absent. An optional represents two possibilities: Either there is a value, and you can unwrap the optional to access that value, or there isn't a value at all.</p><p>Here's an "
                },
                {
                    "id": 4,
                    "title": "Operators",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>An operator is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (+) adds two numbers, as in \"let i = 1 + 2\".</p><p>The assignment operator (a = b) initializes or updates "
                },
                {
                    "id": 5,
                    "title": "Strings",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>A string is a series of characters, such as 'hello, world' or 'albatross'. Swift strings are represented by the String type. You can include predefined String values within your code as string literals. A string literal is a sequence "
                },
                {
                    "id": 6,
                    "title": "Control Flow",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%205%20-%20Loops%20Part%201-vxyrLbmm9Oo.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Swift provides a variety of control flow statements. These include while loops to perform a task multiple times; if, guard, and switch statements to execute different branches of code based on certain conditions; and statements "
                },
                {
                    "id": 7,
                    "title": "Functions",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%207%20-%20Functions%20Part%201-2kwyQ5w00Uc.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to \"call\" the function to perform its task when needed.</p><p>When you "
                },
                {
                    "id": 8,
                    "title": "Structures and Classes",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%209%20-%20Classes%20Part%201-ZDzdz52tex4.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Structures and classes are general-purpose, flexible constructs that become the building blocks of your program's code. You define properties and methods to add functionality to your structures and classes using the same syntax "
                },
                {
                    "id": 9,
                    "title": "Error Handling",
                    "video": "Try%20_%20Catch%20Basics%20-%20Swift%20Error%20Handling%20-%20Xcode%2010,%20Swift%204-9hb80LAwf5c.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at "
                }
            ]
        },
        "test": {
            "id": 0,
            "image": "testSwift",
            "time": "30 minutes",
            "description": "Gear up and put your Swift knowledge to the test.",
            "questions": [
                {
                    "id": 0,
                    "content": "<p>What keyword is used to define a constant in Swift?</p>",
                    "correctIndex": 2,
                    "answers": [
                        "const",
                        "var",
                        "let",
                        "const var"
                    ]
                },
                {
                    "id": 1,
                    "content": "<p>How large is an Int?</p>",
                    "correctIndex": 3,
                    "answers": [
                        "16 bits",
                        "32 bits",
                        "64 bits",
                        "It depends on the platform"
                    ]
                },
                {
                    "id": 2,
                    "content": "<p>What is the value of <span class='pre'>b</span> in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>a</span> = <span class='k'>false</span></li><li><span class='k'>let</span> <span class='nv'>b</span> = <span class='k'>false</span> || ( <span class='k'>true</span> && !<span class='k'>a</span> )</li></ol></div></div></div>",
                    "correctIndex": 0,
                    "answers": [
                        "true",
                        "false"
                    ]
                },
                {
                    "id": 3,
                    "content": "<p>What is the type and value of str in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>num</span> = <span class='m'>12.0</span></li><li><span class='k'>let</span> <span class='nv'>str</span> = <span class='nv'>String</span>(<span class='nv'>num</span>)</li></ol></div></div></div>",
                    "correctIndex": 1,
                    "answers": [
                        "Type: String, Value: \"12.0\"",
                        "Type: String?, Value: \"12.0\"",
                        "Type: String, Value: \"12\"",
                        "Type: String?, Value: nil"
                    ]
                },
                {
                    "id": 4,
                    "content": "<p>What operator takes two numbers, and returns a boolean?</p>",
                    "correctIndex": 4,
                    "answers": [
                        "<",
                        ">",
                        "==",
                        "!=",
                        "all of the above"
                    ]
                },
                {
                    "id": 5,
                    "content": "<p>What does the following code output?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>total</span> = <span class='m'>0</span></li><li><span class='k'>let</span> <span class='nv'>nums</span> = [<span class='m'>0</span>, <span class='m'>1</span>, <span class='m'>2</span>, <span class='m'>3</span>]</li><li><span class='k'>for</span> <span class='nv'>num</span> <span class='k'>in</span> <span class='nv'>nums</span> {</li><li><span class='nv'>total</span> += <span class='nv'>num</span></span></li><li>}</li>",
                    "correctIndex": 2,
                    "answers": [
                        "0",
                        "3",
                        "6",
                        "10"
                    ]
                },
                {
                    "id": 6,
                    "content": "<p>What is the following function's return type?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>func</span> <span class='nv'>foo</span>(<span class='nv'>bar</span>: <span class='nc'>String</span>, <span class='nv'>bizz</span>: <span class='nc'>Bool</span>) -&gt; <span class='nc'>Int</span> {...}</li></ol></div></div></div>",
                    "correctIndex": 2,
                    "answers": [
                        "String",
                        "Bool",
                        "Int",
                        "It doesn't have a return type"
                    ]
                },
                {
                    "id": 7,
                    "content": "Structures can't:",
                    "correctIndex": 3,
                    "answers": [
                        "Define properties to store values",
                        "Define initializers to set up their initial state",
                        "Conform to protocols to provide standard functionality of a certain kind",
                        "Inherit the characteristics of another structure"
                    ]
                },
                {
                    "id": 8,
                    "content": "Why might you throw an error?",
                    "correctIndex": 1,
                    "answers": [
                        "The code has become too complicated to continue writing",
                        "Something unexpected happened and the normal flow of execution can't continue",
                        "To pass data to a caller method"
                    ]
                },
                {
                    "id": 9,
                    "content": "How can you deal with an error?",
                    "correctIndex": 3,
                    "answers": [
                        "By correcting the problem",
                        "By trying an alternative approach",
                        "By informing the user of the failure",
                        "All of the above"
                    ]
                }
            ]
        }
        "id": 2,
        "category": "Swift2",
        "content": {
            "id": 0,
            "image": "rune2-urus",
            "time": "31 hours",
            "description": "Understand the fundamentals of the Swift programming language.",
            "lessons": [
                {
                    "id": 0,
                    "title": "Constants and Variables",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<div class='section' id='the-basics'><p>Constants and variables must be declared before they're used. You declare constants with the let keyword and variables with the var keyword. Here's an example of how constants and variables can be "
                },
                {
                    "id": 1,
                    "title": "Numbers",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Integers are whole numbers with no fractional component, such as 42 and -23. Integers are either signed (positive, zero, or negative) or unsigned (positive or zero). Swift provides signed and unsigned integers in 8, 16, 32, and "
                },
                {
                    "id": 2,
                    "title": "Booleans",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Swift has a basic Boolean type, called Bool. Boolean values are referred to as logical, because they can only ever be true or false. Swift provides two Boolean constant values, true and false:</p><div class='highlight-swift "
                },
                {
                    "id": 3,
                    "title": "Optionals",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%2013%20-%20Optionals-uT2IHQpE3ms.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>You use optionals in situations where a value may be absent. An optional represents two possibilities: Either there is a value, and you can unwrap the optional to access that value, or there isn't a value at all.</p><p>Here's an "
                },
                {
                    "id": 4,
                    "title": "Operators",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>An operator is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (+) adds two numbers, as in \"let i = 1 + 2\".</p><p>The assignment operator (a = b) initializes or updates "
                },
                {
                    "id": 5,
                    "title": "Strings",
                    "video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>A string is a series of characters, such as 'hello, world' or 'albatross'. Swift strings are represented by the String type. You can include predefined String values within your code as string literals. A string literal is a sequence "
                },
                {
                    "id": 6,
                    "title": "Control Flow",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%205%20-%20Loops%20Part%201-vxyrLbmm9Oo.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Swift provides a variety of control flow statements. These include while loops to perform a task multiple times; if, guard, and switch statements to execute different branches of code based on certain conditions; and statements "
                },
                {
                    "id": 7,
                    "title": "Functions",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%207%20-%20Functions%20Part%201-2kwyQ5w00Uc.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to \"call\" the function to perform its task when needed.</p><p>When you "
                },
                {
                    "id": 8,
                    "title": "Structures and Classes",
                    "video": "Learn%20Swift%20for%20Beginners%20-%20Ep%209%20-%20Classes%20Part%201-ZDzdz52tex4.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Structures and classes are general-purpose, flexible constructs that become the building blocks of your program's code. You define properties and methods to add functionality to your structures and classes using the same syntax "
                },
                {
                    "id": 9,
                    "title": "Error Handling",
                    "video": "Try%20_%20Catch%20Basics%20-%20Swift%20Error%20Handling%20-%20Xcode%2010,%20Swift%204-9hb80LAwf5c.mp4",
                    "duration": "17 minutes",
                    "explanation": "<p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at "
                }
            ]
        },
        "test": {
            "id": 1,
            "image": "rune2up-ansuz",
            "time": "30 minutes",
            "description": "Gear up and put your Swift knowledge to the test.",
            "questions": [
                {
                    "id": 0,
                    "content": "<p>What keyword is used to define a constant in Swift?</p>",
                    "correctIndex": 2,
                    "answers": [
                        "const",
                        "var",
                        "let",
                        "const var"
                    ]
                },
                {
                    "id": 1,
                    "content": "<p>How large is an Int?</p>",
                    "correctIndex": 3,
                    "answers": [
                        "16 bits",
                        "32 bits",
                        "64 bits",
                        "It depends on the platform"
                    ]
                },
                {
                    "id": 2,
                    "content": "<p>What is the value of <span class='pre'>b</span> in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>a</span> = <span class='k'>false</span></li><li><span class='k'>let</span> <span class='nv'>b</span> = <span class='k'>false</span> || ( <span class='k'>true</span> && !<span class='k'>a</span> )</li></ol></div></div></div>",
                    "correctIndex": 0,
                    "answers": [
                        "true",
                        "false"
                    ]
                },
                {
                    "id": 3,
                    "content": "<p>What is the type and value of str in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>num</span> = <span class='m'>12.0</span></li><li><span class='k'>let</span> <span class='nv'>str</span> = <span class='nv'>String</span>(<span class='nv'>num</span>)</li></ol></div></div></div>",
                    "correctIndex": 1,
                    "answers": [
                        "Type: String, Value: \"12.0\"",
                        "Type: String?, Value: \"12.0\"",
                        "Type: String, Value: \"12\"",
                        "Type: String?, Value: nil"
                    ]
                },
                {
                    "id": 4,
                    "content": "<p>What operator takes two numbers, and returns a boolean?</p>",
                    "correctIndex": 4,
                    "answers": [
                        "<",
                        ">",
                        "==",
                        "!=",
                        "all of the above"
                    ]
                },
                {
                    "id": 5,
                    "content": "<p>What does the following code output?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>total</span> = <span class='m'>0</span></li><li><span class='k'>let</span> <span class='nv'>nums</span> = [<span class='m'>0</span>, <span class='m'>1</span>, <span class='m'>2</span>, <span class='m'>3</span>]</li><li><span class='k'>for</span> <span class='nv'>num</span> <span class='k'>in</span> <span class='nv'>nums</span> {</li><li><span class='nv'>total</span> += <span class='nv'>num</span></span></li><li>}</li>",
                    "correctIndex": 2,
                    "answers": [
                        "0",
                        "3",
                        "6",
                        "10"
                    ]
                },
                {
                    "id": 6,
                    "content": "<p>What is the following function's return type?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>func</span> <span class='nv'>foo</span>(<span class='nv'>bar</span>: <span class='nc'>String</span>, <span class='nv'>bizz</span>: <span class='nc'>Bool</span>) -&gt; <span class='nc'>Int</span> {...}</li></ol></div></div></div>",
                    "correctIndex": 2,
                    "answers": [
                        "String",
                        "Bool",
                        "Int",
                        "It doesn't have a return type"
                    ]
                },
                {
                    "id": 7,
                    "content": "Structures can't:",
                    "correctIndex": 3,
                    "answers": [
                        "Define properties to store values",
                        "Define initializers to set up their initial state",
                        "Conform to protocols to provide standard functionality of a certain kind",
                        "Inherit the characteristics of another structure"
                    ]
                },
                {
                    "id": 8,
                    "content": "Why might you throw an error?",
                    "correctIndex": 1,
                    "answers": [
                        "The code has become too complicated to continue writing",
                        "Something unexpected happened and the normal flow of execution can't continue",
                        "To pass data to a caller method"
                    ]
                },
                {
                    "id": 9,
                    "content": "How can you deal with an error?",
                    "correctIndex": 3,
                    "answers": [
                        "By correcting the problem",
                        "By trying an alternative approach",
                        "By informing the user of the failure",
                        "All of the above"
                    ]
                }
            ]
        }
    }
]
